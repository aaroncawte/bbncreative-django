# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details

version: 2.0

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - install

      - test-django:
          requires: 
            - install
      
      - test-node:
          requires:
            - install

      - build-deployment:
          filters:
            branches:
              only: Auto_Deploy_Test
          requires: 
            - install
            - test-django
            - test-node

      - deploy:
          filters:
            branches:
              only: Auto_Deploy_Test
          requires:
            - build-deployment

jobs:
  install:
    docker:
      # https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/python:3.7.0
      - image: circleci/postgres:10.5

    working_directory: ~/repo

    steps:

      - attach_workspace:
          at: ~/install-workspace
      
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-

      # Activate virtual environment and install project
      - run:
          name: Install Dependencies
          command: |
            python3 -m venv bbn-env
            . bbn-env/bin/activate
            pip install -r requirements.txt
            nodeenv -p --node=8.11.4

      # Save everything to the workspace for deployment
      - persist_to_workspace:
          root: /home/circleci/repo
          paths:
            - .

      # Cache dependencies using checksum of requirements.txt
      - save_cache:
          paths:
            - ./bbn-env
          key: v2-dependencies-{{ checksum "requirements.txt" }}

  test-django:
    docker:
      - image: circleci/python:3.7.0
      - image: circleci/postgres:10.5 # service image - secondary to python

    working_directory: ~/repo
    
    steps:

      - checkout

      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-

      - run:
          name: Back-End Tests
          command: |
            . bbn-env/bin/activate
            python manage.py test

      - store_artifacts:
          path: back-end-test-reports
          destination: back-end-test-reports

  test-node:
    docker:
      - image: circleci/node:8.11.4

    working_directory: ~/repo
    
    steps:

      - checkout

      - restore_cache:
          keys:
          - v2-front-end-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v2-front-end-dependencies-

      - run:
          name: Front-End Tests
          command: |
            npm install
            npm test

      # Cache node dependencies using checksum of package.json
      - save_cache:
          paths: 
            - ./node_modules
          key: v2-front-end-dependencies-{{ checksum "package.json" }}
      

      # Store test reports
      - store_artifacts:
          path: front-end-test-reports
          destination: front-end-test-reports


  build-deployment:
    
    docker:
      - image: circleci/python:3.7.0

    steps:

      # Refer to workspace defined in install step
      - attach_workspace:
          at: ~/build-deployment-workspace

      - run:
          name: Build Deployment
          command: |
            echo "Contents of build-deployment-workspace:"
            ls ~/build-deployment-workspace
            # Setup directory structure
            mkdir build build/{bbncreative,bbncreative_cms,bbncreative_cms/migrations,bbncreative_cms/views,static,static/style}
            # /
            cp ~/build-deployment-workspace/requirements.txt build/requirements_server.txt # Requirements file with server-specific name
            cp ~/build-deployment-workspace/manage.py build/
            # /bbncreative
            # TODO: secrets.py - hardcode env vars
            cat <<EOT >> build/bbncreative/secrets.py
            DJANGO_SECRET="${SECRET_KEY}"
            POST_DB={ "NAME": "${POSTGRES_NAME}", "USER": "${POSTGRES_USER}", "PASSWORD": "${POSTGRES_PROD_PASSWORD}", "HOST": "${POSTGRES_HOST}", "PORT": "${POSTGRES_PORT}"}
            DJANGO_DEBUG_MODE="${DJANGO_DEBUG_MODE}"
            EMAIL_HOST="${EMAIL_HOST}"
            EMAIL_HOST_PASSWORD="${EMAIL_HOST_PASSWORD}"
            EMAIL_HOST_USER="${EMAIL_HOST_USER}"
            LOCKDOWN_PASSWORD="${LOCKDOWN_PASSWORD}"
            RECAPTCHA_SECRET="${RECAPTCHA_SECRET}"
            RECAPTCHA_SITE_KEY="${RECAPTCHA_SITE_KEY}"
            TWITTER_ACCESS_TOKEN="${TWITTER_ACCESS_TOKEN}"
            TWITTER_APP_KEY="${TWITTER_APP_KEY}"
            EOT

            cp ~/build-deployment-workspace/bbncreative/{settings.py,urls.py,wsgi.py} build/bbncreative
            # /bbncreative_cms
            cp -a ~/build-deployment-workspace/bbncreative_cms/migrations/. build/bbncreative_cms/migrations
            cp -a ~/build-deployment-workspace/bbncreative_cms/views/. build/bbncreative_cms/views

            cp ~/build-deployment-workspace/bbncreative_cms/{admin.py,apps.py,context_processors.py,forms.py,models.py,urls.py} build/bbncreative_cms
            # /static
            cp -a ~/build-deployment-workspace/static/{fonts/.,img/.,js/.,vid/.,manifest.json} build/static
            cp ~/build-deployment-workspace/static/style/style.min.css build/static/style
            # /templates
            cp -a ~/build-deployment-workspace/templates/. build/templates

      - run:
          name: Create ZIP Archive Of Build
          command: |
            zip -r build build/.
      
      - store_artifacts:
          path: build.zip
          destination: build
            

      # Save build deployment to workspace
      - persist_to_workspace:
          root: .
          paths:
            - build
            - build.zip
      

  deploy:

    docker:
      - image: circleci/python:3.7.0

    steps:

      # Server SSH key
      - add_ssh_keys:
          fingerprints:
            - "a3:e2:e1:16:45:1a:dd:fd:81:5d:31:18:a1:ff:cc:1c"

      # Refer to workspace defined in install step
      - attach_workspace:
          at: ~/deploy-workspace

      # Deployment
      - run:
          name: Upload Deployment Archive
          environment:
            SSH_DEPLOY_PATH: ~/Deployments
            SSH_KNOWN_HOST: "bbncreative.co ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPqWuMDEB5FMoaHDC8mynq2sG1cBkiAmYrBAKI3+M8+oO7QbtRxTQFlgTyNtiiBrKhvqVkBNkFzPm/ccmBZFt7Q="
          command: |
            # Define build strings
            BUILD_ARCHIVE_NAME="build-${CIRCLE_SHA1}-${CIRCLE_WORKFLOW_ID}"
            BUILD_LOG_STRING="$(date +'%D %T'): BUILD ${CIRCLE_SHA1} ON WORKFLOW ${CIRCLE_WORKFLOW_ID}"
            # Workaround for SSH fingerprints
            echo "${SSH_KNOWN_HOST}" >> ~/.ssh/known_hosts
            # Ensure deployment folder exists, log upload to deployment_log.txt
            ssh $SSH_USER@$SSH_HOST "mkdir -p Deployments && cd Deployments && echo '${BUILD_LOG_STRING}' >> deployment_log.txt"
            # Copy archive using unique name
            scp ~/deploy-workspace/build.zip "$SSH_USER@$SSH_HOST:$SSH_DEPLOY_PATH/$BUILD_ARCHIVE_NAME.zip"

