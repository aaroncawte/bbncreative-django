version: 2.1

commands:
  restore-deps:
    steps:
      - run:
          name: Change directory
          command: |
            cd ..

      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "requirements_ci.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-

  restore-node-deps:
    steps:
      - run:
          name: Change directory
          command: |
            cd src/bbncreative-frontend

      - restore_cache:
          keys:
            - v1-node-modules-{{ checksum "src/bbncreative-frontend/yarn.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-node-modules-

  add-known-host-workaround:
    steps:
      - run:
          name: Add known host
          environment:
            KNOWN_HOST: "bbncreative.co ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPqWuMDEB5FMoaHDC8mynq2sG1cBkiAmYrBAKI3+M8+oO7QbtRxTQFlgTyNtiiBrKhvqVkBNkFzPm/ccmBZFt7Q="
          command: echo "${KNOWN_HOST}" >> ~/.ssh/known_hosts

  build-secrets-file:
    parameters:
      filepath:
        description: destination filepath
        type: string
    steps:
      - run:
          name: Build secrets file
          command: |
            echo DJANGO_SECRET=\"${SECRET_KEY}\" > << parameters.filepath >>
            (
              echo POST_DB={\"NAME\": \"${POSTGRES_NAME}\", \"USER\": \"${POSTGRES_USER}\", \"PASSWORD\": \"${POSTGRES_PROD_PASSWORD}\", \"HOST\": \"${POSTGRES_HOST}\", \"PORT\": \"${POSTGRES_PORT}\"}  
              echo DJANGO_DEBUG_MODE="${DJANGO_DEBUG_MODE}";
              echo EMAIL_HOST=\"${EMAIL_HOST}\";
              echo EMAIL_HOST_PASSWORD=\"${EMAIL_HOST_PASSWORD}\";
              echo EMAIL_HOST_USER=\"${EMAIL_HOST_USER}\";
              echo LOCKDOWN_PASSWORD=\"${LOCKDOWN_PASSWORD}\";
              echo RECAPTCHA_SECRET=\"${RECAPTCHA_SECRET}\";
              echo RECAPTCHA_SITE_KEY=\"${RECAPTCHA_SITE_KEY}\";
              echo TWITTER_ACCESS_TOKEN=\"${TWITTER_ACCESS_TOKEN}\";
              echo TWITTER_APP_KEY=\"${TWITTER_APP_KEY}\"
            ) >> << parameters.filepath >>

executors:
  python-executor:
    docker:
      - image: circleci/python:3.8.2
      - image: circleci/postgres:10.5 # service image - secondary to python
  python-no-db:
    docker:
      - image: circleci/python:3.8.2
  node-executor:
    docker:
      - image: circleci/node:12.16.3

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - install

      - install-js

      - lint-python:
          requires:
            - install

      - lint-js:
          requires:
            - install-js

      - test-js:
          requires:
            - install-js

      - test-django:
          requires:
            - install

      - build-js:
          requires:
            - lint-js
            - test-js

      - build-deployment:
          requires:
            - test-django
            - lint-python
            - build-js

      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - build-deployment

jobs:
  install:
    executor: python-executor
    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/install-workspace

      - checkout
      - restore-deps

      # Activate virtual environment and install project
      - run:
          name: Install Dependencies
          command: |
            cd ..
            python3 -m venv bbn-env-ci-382
            . bbn-env-ci-382/bin/activate
            pip install -r repo/requirements_ci.txt
            python repo/src/manage.py collectstatic --settings="bbncreative.settings_ci"

      # Save everything to the workspace for deployment
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - .

      # Cache dependencies using checksum of requirements_ci.txt
      - save_cache:
          paths:
            - ../bbn-env-ci-382
          key: v3-dependencies-{{ checksum "requirements_ci.txt" }}

  install-js:
    executor: node-executor
    working_directory: ~/repo

    steps:
      - checkout
      - restore-node-deps

      # Change to front-end directory and run install
      - run:
          name: Install Front-End Dependencies
          command: |
            cd src/bbncreative-frontend
            yarn

      # Cache dependencies using checksum of yarn.lock
      - save_cache:
          paths:
            - src/bbncreative-frontend/node_modules
          key: v1-node-modules-{{ checksum "src/bbncreative-frontend/yarn.lock" }}

  lint-python:
    executor: python-executor
    working_directory: ~/repo

    steps:
      - checkout
      - restore-deps

      - run:
          name: Black linter
          command: |
            . ../bbn-env-ci-382/bin/activate
            black ./src --check --exclude /migrations/

  lint-js:
    executor: node-executor
    working_directory: ~/repo

    steps:
      - checkout
      - restore-node-deps

      - run:
          name: Lint Front-End
          command: |
            cd ./src/bbncreative-frontend
            yarn eslint

  test-js:
    executor: node-executor
    working_directory: ~/repo

    steps:
      - checkout
      - restore-node-deps

      - run:
          name: Test Front-End
          command: |
            cd ./src/bbncreative-frontend
            yarn test

  test-django:
    executor: python-executor
    working_directory: ~/repo

    steps:
      - checkout
      - restore-deps

      - run:
          name: Back-End Tests
          command: |
            . ../bbn-env-ci-382/bin/activate
            python src/manage.py test --settings="bbncreative.settings_ci"

      - store_test_results:
          path: test_results

  build-js:
    executor: node-executor
    working_directory: ~/repo

    steps:
      # Refer to workspace defined in install step
      - attach_workspace:
          at: ~/build-deployment-workspace

      - checkout
      - restore-node-deps

      - run:
          name: Build front-end bundle
          command: |
            cd ./src/bbncreative-frontend
            yarn build
            cd build
            ls

      # Save everything to the workspace for deployment
      - persist_to_workspace:
          root: /home/circleci/repo/src/bbncreative-frontend
          paths:
            - build

  build-deployment:
    executor: python-no-db

    steps:
      # Refer to workspace defined in install step
      - attach_workspace:
          at: ~/build-deployment-workspace

      - run:
          name: Build Deployment
          command: |

            echo "âš  See build contents here"
            ls ~/build-deployment-workspace/build

            # Setup directory structure
            mkdir build build/{bbncreative,bbncreative_api,bbncreative_cms,bbncreative_cms/migrations,bbncreative_cms/views,static,static/style,static/fonts,static/img,static/js,static/vid}

            # /
            cp ~/build-deployment-workspace/repo/requirements_server.txt build/requirements_server.txt # Requirements file with server-specific name
            cp ~/build-deployment-workspace/repo/src/manage.py build/

            cp ~/build-deployment-workspace/repo/src/bbncreative/{__init__,settings_prod,urls,wsgi}.py build/bbncreative

            # /bbncreative_api
            cp ~/build-deployment-workspace/repo/src/bbncreative_api/{__init__,apps,serializers,urls,view_sets,wsgi}.py build/bbncreative_api

            # /bbncreative_cms
            cp -a ~/build-deployment-workspace/repo/src/bbncreative_cms/{migrations,views} build/bbncreative_cms
            cp ~/build-deployment-workspace/repo/src/bbncreative_cms/{__init__,admin,apps,context_processors,forms,models,urls}.py build/bbncreative_cms

            # /static
            cp -a ~/build-deployment-workspace/repo/src/static/{fonts,img,js,vid} build/static
            cp ~/build-deployment-workspace/repo/src/static/manifest.json build/static
            cp ~/build-deployment-workspace/repo/src/static/style/style.min.css build/static/style

            # /templates
            cp -a ~/build-deployment-workspace/repo/src/templates/. build/templates

            # static apps (from collected static, not repository)
            cp -a ~/build-deployment-workspace/repo/build/static/{admin,rest_framework} build/static

      # /bbncreative
      - build-secrets-file:
          filepath: build/bbncreative/secrets.py

      - run:
          name: Create ZIP Archive Of Build
          command: |
            zip -r build build/.

      - store_artifacts:
          path: build.zip
          destination: build

      # Save build deployment to workspace
      - persist_to_workspace:
          root: .
          paths:
            - build
            - build.zip

  deploy:
    executor: python-no-db

    steps:
      # Server SSH key
      - add_ssh_keys:
          fingerprints:
            - "a3:e2:e1:16:45:1a:dd:fd:81:5d:31:18:a1:ff:cc:1c"

      # Refer to workspace defined in install step
      - attach_workspace:
          at: ~/deploy-workspace

      # Workaround for SSH fingerprints
      - add-known-host-workaround

      # Deployment
      - run:
          name: Upload Deployment Archive
          environment:
            DEPLOYMENT_DIR: ~/Deployments
          command: |
            # Define build strings
            BUILD_ARCHIVE_NAME="build-$(date +'%s')-${CIRCLE_BUILD_NUM}"
            BUILD_LOG_STRING="$(date +'%s') ($(date +'%D %T')): BUILD BRANCH ${CIRCLE_BRANCH} ON BUILD ${CIRCLE_BUILD_NUM} (${CIRCLE_SHA1})"
            # Ensure deployment folder exists, log upload to deployment_log.txt
            ssh $SSH_USER@$SSH_HOST "mkdir -p Deployments && cd $_ && echo '${BUILD_LOG_STRING}' >> deployment_log.txt"
            # Copy archive using unique name
            scp ~/deploy-workspace/build.zip "$SSH_USER@$SSH_HOST:$DEPLOYMENT_DIR/$BUILD_ARCHIVE_NAME.zip"
            # Unzip archive into /build directory
            ssh $SSH_USER@$SSH_HOST "cd ${DEPLOYMENT_DIR} && unzip -o ${BUILD_ARCHIVE_NAME}.zip"

      - run:
          name: Backup Current Instance
          environment:
            BACKUP_PATH: ~/website/last_build.zip
            PROD_BUILD_PATH: ~/website/bbncreative
          command: |
            ssh $SSH_USER@$SSH_HOST "zip -r ${BACKUP_PATH} ${PROD_BUILD_PATH}"

      - run:
          name: Copy New Build Into Production
          environment:
            DEPLOY_BUILD_PATH: ~/Deployments/build
            PROD_BUILD_PATH: ~/website/bbncreative
          command: |
            ssh $SSH_USER@$SSH_HOST "rm -rf ${PROD_BUILD_PATH} && mkdir ${PROD_BUILD_PATH} && cp -a ${DEPLOY_BUILD_PATH}/. ${PROD_BUILD_PATH}"

      - run:
          name: Refresh Web Server
          command: |
            ssh $SSH_USER@$SSH_HOST "sudo systemctl restart gunicorn.service && sudo systemctl restart nginx.service"

      - run:
          name: Clean up old deployment archives
          environment:
            DEPLOYMENT_DIR: ~/Deployments
            DAYS_TO_KEEP_ARCHIVES_FOR: "30"
          command: |
            ssh $SSH_USER@$SSH_HOST "find ${DEPLOYMENT_DIR} -name "build-*.zip" -type f -mtime +${DAYS_TO_KEEP_ARCHIVES_FOR} -exec rm -f {} \;"

      - run:
          name: Run health checks
          environment:
            MANAGE_PY_PATH: ~/website/bbncreative/manage.py
            NGINX_PATH: /usr/sbin/nginx
            VENV_PATH: /home/aaron/envs/bbn-env-382/bin/activate
          command: |
            cd ~
            mkdir health_checks
            ssh $SSH_USER@$SSH_HOST "source ${VENV_PATH} ; pip check --disable-pip-version-check" > ~/health_checks/pip_check.log
            ssh $SSH_USER@$SSH_HOST "source ${VENV_PATH} ; python ${MANAGE_PY_PATH} check --deploy" 2> ~/health_checks/deploy.log
            ssh $SSH_USER@$SSH_HOST "source ${VENV_PATH} ; python ${MANAGE_PY_PATH} makemigrations --check" > ~/health_checks/migrations.log
            ssh $SSH_USER@$SSH_HOST "sudo ${NGINX_PATH} -t" 2> ~/health_checks/nginx.log

      - store_artifacts:
          path: ~/health_checks
          destination: health_checks
