version: 2.1

commands:
  restore-deps:
    steps:
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

  build-secrets-file:
    parameters:
      filepath:
        description: destination filepath
        type: string
    steps:
      - run:
          name: Build secrets file
          command: |
            echo DJANGO_SECRET=\"${SECRET_KEY}\" > << parameters.filepath >>
            echo POST_DB={\"NAME\": \"${POSTGRES_NAME}\", \"USER\": \"${POSTGRES_USER}\", \"PASSWORD\": \"${POSTGRES_PROD_PASSWORD}\", \"HOST\": \"${POSTGRES_HOST}\", \"PORT\": \"${POSTGRES_PORT}\"} >> << parameters.filepath >>
            echo DJANGO_DEBUG_MODE="${DJANGO_DEBUG_MODE}" >> << parameters.filepath >>
            echo EMAIL_HOST=\"${EMAIL_HOST}\" >> << parameters.filepath >>
            echo EMAIL_HOST_PASSWORD=\"${EMAIL_HOST_PASSWORD}\" >> << parameters.filepath >>
            echo EMAIL_HOST_USER=\"${EMAIL_HOST_USER}\" >> << parameters.filepath >>
            echo LOCKDOWN_PASSWORD=\"${LOCKDOWN_PASSWORD}\" >> << parameters.filepath >>
            echo RECAPTCHA_SECRET=\"${RECAPTCHA_SECRET}\" >> << parameters.filepath >>
            echo RECAPTCHA_SITE_KEY=\"${RECAPTCHA_SITE_KEY}\" >> << parameters.filepath >>
            echo TWITTER_ACCESS_TOKEN=\"${TWITTER_ACCESS_TOKEN}\" >> << parameters.filepath >>
            echo TWITTER_APP_KEY=\"${TWITTER_APP_KEY}\" >> << parameters.filepath >>

executors:
  bbncreative-runner:
    docker:
      - image: circleci/python:3.7.0
      - image: circleci/postgres:10.5 # service image - secondary to python
  bbncreative-ops:
    docker:
      - image: circleci/python:3.7.0

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - install

      - test-django:
          requires:
            - install

      - build-deployment:
          requires:
            - test-django

      - deploy:
          filters:
            branches:
              only:
                - master
                - health-check-ci-step
          requires:
            - build-deployment

jobs:
  install:
    executor: bbncreative-runner
    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/install-workspace

      - checkout
      - restore-deps

      # Activate virtual environment and install project
      - run:
          name: Install Dependencies
          command: |
            python3 -m venv bbn-env
            . bbn-env/bin/activate
            pip install -r requirements.txt

      # Save everything to the workspace for deployment
      - persist_to_workspace:
          root: /home/circleci/repo
          paths:
            - .

      # Cache dependencies using checksum of requirements.txt
      - save_cache:
          paths:
            - ./bbn-env
          key: v2-dependencies-{{ checksum "requirements.txt" }}

  test-django:
    executor: bbncreative-runner
    working_directory: ~/repo

    steps:
      - checkout
      - restore-deps

      - run:
          name: Back-End Tests
          command: |
            . bbn-env/bin/activate
            python manage.py test

      - store_artifacts:
          path: back-end-test-reports
          destination: back-end-test-reports

  build-deployment:
    executor: bbncreative-ops

    steps:
      # Refer to workspace defined in install step
      - attach_workspace:
          at: ~/build-deployment-workspace

      - run:
          name: Build Deployment
          command: |
            echo "Contents of build-deployment-workspace:"
            ls ~/build-deployment-workspace

            # Setup directory structure
            mkdir build build/{bbncreative,bbncreative_cms,bbncreative_cms/migrations,bbncreative_cms/views,static,static/style,static/fonts,static/img,static/js,static/vid}

            # /
            cp ~/build-deployment-workspace/requirements.txt build/requirements_server.txt # Requirements file with server-specific name
            cp ~/build-deployment-workspace/manage.py build/

            cp ~/build-deployment-workspace/bbncreative/{__init__,settings_prod,urls,wsgi}.py build/bbncreative

            # /bbncreative_cms
            cp -a ~/build-deployment-workspace/bbncreative_cms/{migrations,views} build/bbncreative_cms
            cp ~/build-deployment-workspace/bbncreative_cms/{__init__,admin,apps,context_processors,forms,models,urls}.py build/bbncreative_cms

            # /static
            cp -a ~/build-deployment-workspace/static/{fonts,img,js,vid} build/static
            cp ~/build-deployment-workspace/static/manifest.json build/static
            cp ~/build-deployment-workspace/static/style/style.min.css build/static/style

            # /templates
            cp -a ~/build-deployment-workspace/templates/. build/templates

      # /bbncreative
      - build-secrets-file:
          filepath: build/bbncreative/secrets.py

      - run:
          name: Create ZIP Archive Of Build
          command: |
            zip -r build build/.

      - store_artifacts:
          path: build.zip
          destination: build

      # Save build deployment to workspace
      - persist_to_workspace:
          root: .
          paths:
            - build
            - build.zip

  deploy:
    executor: bbncreative-ops

    steps:
      # Server SSH key
      - add_ssh_keys:
          fingerprints:
            - "a3:e2:e1:16:45:1a:dd:fd:81:5d:31:18:a1:ff:cc:1c"

      # Refer to workspace defined in install step
      - attach_workspace:
          at: ~/deploy-workspace

      # Deployment
      - run:
          name: Upload Deployment Archive
          environment:
            DEPLOYMENT_DIR: ~/Deployments
            KNOWN_HOST: "bbncreative.co ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPqWuMDEB5FMoaHDC8mynq2sG1cBkiAmYrBAKI3+M8+oO7QbtRxTQFlgTyNtiiBrKhvqVkBNkFzPm/ccmBZFt7Q="
          command: |
            # Define build strings
            BUILD_ARCHIVE_NAME="build-$(date +'%s')-${CIRCLE_BUILD_NUM}"
            BUILD_LOG_STRING="$(date +'%s') ($(date +'%D %T')): BUILD BRANCH ${CIRCLE_BRANCH} ON BUILD ${CIRCLE_BUILD_NUM} (${CIRCLE_SHA1})"
            # Workaround for SSH fingerprints
            echo "${KNOWN_HOST}" >> ~/.ssh/known_hosts
            # Ensure deployment folder exists, log upload to deployment_log.txt
            ssh $SSH_USER@$SSH_HOST "mkdir -p Deployments && cd Deployments && echo '${BUILD_LOG_STRING}' >> deployment_log.txt"
            # Copy archive using unique name
            scp ~/deploy-workspace/build.zip "$SSH_USER@$SSH_HOST:$DEPLOYMENT_DIR/$BUILD_ARCHIVE_NAME.zip"
            # Unzip archive into /build directory
            ssh $SSH_USER@$SSH_HOST "cd ${DEPLOYMENT_DIR} && unzip -o ${BUILD_ARCHIVE_NAME}.zip"

      - run:
          name: Backup Current Instance
          environment:
            BACKUP_PATH: ~/website/last_build.zip
            PROD_BUILD_PATH: ~/website/bbncreative
          command: |
            ssh $SSH_USER@$SSH_HOST "zip -r ${BACKUP_PATH} ${PROD_BUILD_PATH}"

      - run:
          name: Copy New Build Into Production
          environment:
            DEPLOY_BUILD_PATH: ~/Deployments/build
            PROD_BUILD_PATH: ~/website/bbncreative
          command: |
            ssh $SSH_USER@$SSH_HOST "rm -rf ${PROD_BUILD_PATH} && mkdir ${PROD_BUILD_PATH} && cp -a ${DEPLOY_BUILD_PATH}/. ${PROD_BUILD_PATH}"

      - run:
          name: Refresh Web Server
          command: |
            ssh $SSH_USER@$SSH_HOST "sudo systemctl restart gunicorn.service && sudo systemctl restart nginx.service"

      - run:
          name: Clean up old deployment archives
          environment:
            DEPLOYMENT_DIR: ~/Deployments
            DAYS_TO_KEEP_ARCHIVES_FOR: "30"
          command: |
            ssh $SSH_USER@$SSH_HOST "find ${DEPLOYMENT_DIR} -name "build-*.zip" -type f -mtime +${DAYS_TO_KEEP_ARCHIVES_FOR} -exec rm -f {} \;"

      - run:
          name: Health check - nginx
          environment:
            NGINX_PATH: /usr/sbin/nginx
          command: |
            ssh $SSH_USER@$SSH_HOST "sudo ${NGINX_PATH} -t" 2> health_check_nginx.log

      - store_artifacts:
          path: health_check_nginx.log
          destination: health_check_nginx.log

      - run:
          name: Health check - pip
          environment:
            VENV_PATH: /home/aaron/website/bbn-env/bin/activate
          command: |
            ssh $SSH_USER@$SSH_HOST "source ${VENV_PATH} ; pip check --disable-pip-version-check" > health_check_pip_check.log

      - store_artifacts:
          path: health_check_pip_check.log
          destination: health_check_pip_check.log

      - run:
          name: Health check - migrations
          environment:
            VENV_PATH: /home/aaron/website/bbn-env/bin/activate
            MANAGE_PY_PATH: ~/website/bbncreative/manage.py

          command: |
            ssh $SSH_USER@$SSH_HOST "source ${VENV_PATH} ; python ${MANAGE_PY_PATH} makemigrations --check" > health_check_migrations.log

      - store_artifacts:
          path: health_check_migrations.log
          destination: health_check_migrations.log
